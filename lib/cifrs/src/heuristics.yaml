# A collection of simple regexp-based rules that can be applied to content
# to disambiguate languages with the same file extension.
#
# configs             - an array of config files that this block applies to.
# rules               - list of rules that are applied in order to the content
#                       of a file with a matching extension. Rules are evaluated
#                       until one of them matches. If none matches, no language
#                       is returned.
# framework            - Framework to be returned if the rule matches.
# matching_strategy    - all / any
# pattern              - Rust-compatible regular expression that makes the rule match.
#                        If no pattern is specified, the rule always matches.
#                        Pattern can be a string with a single regular expression
#                        or an array of strings that will be merged in a single
#                        regular expression (with union).
# dependency            - match on dependency
# Please keep this list alphabetized.

disambiguations:
  - configs: ['_config.toml', '_config.yaml', '_config.yml']
    rules:
      - framework: blah
        match_strategy: all / any

  - configs: ['nuxt.config.js']
    rules:
      - framework:
dependencies:
# id
# pattern
# path
  - id: cargo
    path: "dependencies"
# TODO: what to do with this??
# csproj
# this could be an xpath or pattern. xpath would require us to know the format for this
  - id: GemFile
    pattern: "gem '{}'"
  - id: PackageJson
    path: "dependencies"
  - id: PipFile
    # toml
    path: packages
  - id: PyProject
    # toml
    path: tool.poetry.dependencies
  - id: RequirementsTxt
    pattern: {}==